@startuml ComponentDiagram_Modular_Architecture
!theme plain
title 4. Komponentendiagramm - Modulare Architektur


package "XAI Factory Core" {
    [XAI Factory] as factory
    [Explainer Registry] as registry
}

package "Explainer Implementations" {
    [GradCAM Explainer] as gradcam
    [Integrated Gradients] as ig
    [Guided Backprop] as gbp
    [Base Explainer ABC] as base
}

package "Memory Management" {
    [Adaptive Batch Processor] as processor
    [Memory Monitor] as monitor
}

package "External Dependencies" {
    [PyTorch] as torch
    [CUDA Runtime] as cuda
}

interface "Evaluation Interface" as IEvaluation


factory --> registry : queries
factory ..> base : creates

registry --> gradcam : registers
registry --> ig : registers
registry --> gbp : registers

gradcam --|> base : implements
ig --|> base : implements
gbp --|> base : implements

base --> processor : uses
processor --> monitor : monitors

factory ..> IEvaluation : provides
base ..> IEvaluation : supports

' External dependencies
gradcam --> torch : depends on
ig --> torch : depends on
gbp --> torch : depends on
processor --> cuda : uses

note as N1
Dependency Inversion Principle:
- High-level modules don't depend on low-level modules
- Both depend on abstractions (interfaces)
- Factory depends on BaseExplainer abstraction
- Registry manages concrete implementations
end note

note as N2
Extension Points:
- New explainers implement BaseExplainer
- Automatic registration via Registry
- Plugin architecture for evaluators
- Configurable memory strategies
end note

@enduml