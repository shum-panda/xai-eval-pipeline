@startuml ActivityDiagram_Adaptive_Batch_Processing
!theme plain
title 3. AktivitÃ¤tsdiagramm - Adaptive Batch Processing

start

:explain(images) called;
:Get first image sample;
:Estimate memory usage for single image;

:Calculate initial batch size
(80% of estimated capacity);

:remaining_images = all images;
:results = empty list;

while (remaining_images not empty?) is (yes)
    :current_batch = next batch of images;

    fork
        :Process current batch;
        :explainer.explain(current_batch);
    fork again
        :Monitor GPU memory usage;
        :memory_usage = get_gpu_memory();
    end fork

    if (Out of Memory Exception?) then (yes)
        :Halve batch size;
        :Log OOM warning;
        :Retry with smaller batch;
    else (no)
        :Calculate memory efficiency;
        :target_diff = target_usage - actual_usage;

        if (target_diff > threshold?) then (increase)
            :Increase batch size by kp * target_diff;
            :batch_size = min(batch_size, max_batch_size);
        elseif (target_diff < -threshold?) then (decrease)
            :Decrease batch size by kp * |target_diff|;
            :batch_size = max(batch_size, 1);
        else (maintain)
            :Keep current batch size;
        endif

        :Add results to output list;
        :Remove processed images from remaining;
    endif
endwhile (no)

:Concatenate all results;
:Return (attributions, predictions, confidences);

stop

note right
Memory Management Strategy:
- Start conservative (80% capacity)
- Adapt based on actual usage
- PID-like control with gain kp
- Emergency fallback on OOM
end note

@enduml