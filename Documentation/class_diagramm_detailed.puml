@startuml class_diagram_detailed
!theme plain
title Detailliertes Klassendiagramm - XAI Module

abstract class XAIMethodBase {
    # model: torch.nn.Module
    # device: str
    # normalize: bool
    + explain(image: torch.Tensor, target_class: int): torch.Tensor
    + {abstract} _generate_explanation(): torch.Tensor
    + normalize_heatmap(heatmap: torch.Tensor): torch.Tensor
    + postprocess(heatmap: torch.Tensor): torch.Tensor
}

class GradCAMExplainer {
    - target_layer: str
    - use_relu: bool
    + __init__(model, target_layer)
    + _generate_explanation(): torch.Tensor
    - _compute_gradients(): torch.Tensor
    - _get_activations(): torch.Tensor
    - _weight_activations(): torch.Tensor
}

class IntegratedGradientsExplainer {
    - baseline: torch.Tensor
    - steps: int
    - internal_batch_size: int
    + __init__(model, steps, baseline)
    + _generate_explanation(): torch.Tensor
    - _interpolate_images(): List[torch.Tensor]
    - _compute_gradients(): torch.Tensor
    - _integrate(): torch.Tensor
}

class GuidedBackpropExplainer {
    - modified_modules: Dict
    + __init__(model)
    + _generate_explanation(): torch.Tensor
    - _register_hooks(): None
    - _guided_relu_hook(): torch.Tensor
    - _remove_hooks(): None
}

class LIMEExplainer {
    - num_samples: int
    - num_features: int
    - segmentation_fn: Callable
    + __init__(model, num_samples)
    + _generate_explanation(): torch.Tensor
    - _segment_image(): torch.Tensor
    - _perturb_image(): List[torch.Tensor]
    - _fit_linear_model(): sklearn.LinearRegression
}

XAIMethodBase <|-- GradCAMExplainer
XAIMethodBase <|-- IntegratedGradientsExplainer
XAIMethodBase <|-- GuidedBackpropExplainer
XAIMethodBase <|-- LIMEExplainer

class XAIFactory {
    + {static} create_explainer(method_name: str, **kwargs): XAIMethodBase
    + {static} get_available_methods(): List[str]
    + {static} register_method(name: str, class_type: Type): None
}

XAIFactory ..> XAIMethodBase : creates

interface MetricInterface {
    + calculate(heatmap: torch.Tensor, ground_truth: torch.Tensor): float
    + get_name(): str
}

class IoUMetric {
    - threshold: float
    + calculate(heatmap, ground_truth): float
    + _threshold_heatmap(): torch.Tensor
}

class PointGameMetric {
    + calculate(heatmap, ground_truth): float
    + _find_max_point(): Tuple[int, int]
    + _point_in_bbox(): bool
}

class PixelPrecisionRecall {
    - threshold: float
    + calculate(heatmap, ground_truth): Dict[str, float]
    + _compute_confusion_matrix(): torch.Tensor
}

MetricInterface <|.. IoUMetric
MetricInterface <|.. PointGameMetric
MetricInterface <|.. PixelPrecisionRecall

@enduml