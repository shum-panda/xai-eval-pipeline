@startuml
!theme plain
title Metric Factory with Auto-Registration

abstract class MetricBase {
    + calculate(heatmap: torch.Tensor, ground_truth: torch.Tensor): Any
    + get_name(): str
}

class IoUMetric {
    - threshold: float
    + calculate(heatmap, ground_truth): float
    + _threshold_heatmap(): torch.Tensor
}

class PointGameMetric {
    + calculate(heatmap, ground_truth): float
    + _find_max_point(): Tuple[int, int]
    + _point_in_bbox(): bool
}

class PixelPrecisionRecall {
    - threshold: float
    + calculate(heatmap, ground_truth): Dict[str, float]
    + _compute_confusion_matrix(): torch.Tensor
}

class MetricFactory {
    - registry: Dict[str, Type[MetricBase]]
    + register(name: str, cls: Type[MetricBase])
    + create(name: str, **kwargs): MetricBase
    + list_metrics(): List[str]
}

annotation "Decorator: @register_metric('iou')" as RegIoU
annotation "Decorator: @register_metric('pointgame')" as RegPG
annotation "Decorator: @register_metric('pixelpr')" as RegPR

MetricBase <|-- IoUMetric
MetricBase <|-- PointGameMetric
MetricBase <|-- PixelPrecisionRecall
MetricFactory o-- "1..*" MetricBase

RegIoU ..> IoUMetric
RegPG ..> PointGameMetric
RegPR ..> PixelPrecisionRecall

@enduml
