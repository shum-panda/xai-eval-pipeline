@startuml sequence_xai_pipeline_execution
!theme plain
title XAI Pipeline - Sequenzdiagramm für typischen Durchlauf

actor User
participant "main.py" as Main
participant "Hydra" as Hydra
participant "XAIOrchestrator" as Orchestrator
participant "DataLoader" as DataLoader
participant "XAIModel" as Model
participant "XAIFactory" as XAIFactory
participant "BaseExplainer" as Explainer
participant "XAIEvaluator" as Evaluator
participant "ResultManager" as ResultManager
participant "MLflow" as MLflow
participant "Visualiser" as Visualiser

== Initialisierung ==
User -> Main: python main.py
activate Main

Main -> Hydra: @hydra.main(config_path, config_name)
activate Hydra
Hydra -> Hydra: Load MasterConfig from YAML
Hydra -> Main: return config
deactivate Hydra

Main -> Orchestrator: new XAIOrchestrator(config)
activate Orchestrator
Orchestrator -> XAIFactory: initialize()
Orchestrator -> Model: XAIModelFactory.create(model_name)
Orchestrator -> Evaluator: new XAIEvaluator()
Orchestrator -> ResultManager: new ResultManager()
Orchestrator -> Visualiser: new Visualiser(config)
Orchestrator -> Main: orchestrator instance
deactivate Orchestrator

== Pipeline Ausführung ==
Main -> Orchestrator: run()
activate Orchestrator

Orchestrator -> Orchestrator: prepare_experiment()
Orchestrator -> MLflow: start_run(experiment_name)
activate MLflow
MLflow -> Orchestrator: run_id
Orchestrator -> MLflow: log_params(model, explainer, etc.)
deactivate MLflow

Orchestrator -> Orchestrator: setup_dataloader()
Orchestrator -> DataLoader: create_dataloader(config)
activate DataLoader
DataLoader -> Orchestrator: dataloader instance
deactivate DataLoader

Orchestrator -> XAIFactory: create(explainer_name, **kwargs)
activate XAIFactory
XAIFactory -> Explainer: new GradCAMExplainer(model)
XAIFactory -> Orchestrator: explainer instance
deactivate XAIFactory

== Batch Processing ==
loop for each batch in dataloader
    Orchestrator -> DataLoader: get_batch()
    activate DataLoader
    DataLoader -> Orchestrator: XAIInputBatch(images, labels, bboxes)
    deactivate DataLoader

    Orchestrator -> Orchestrator: process_batch(batch, explainer)
    activate Orchestrator

    loop for each image in batch
        Orchestrator -> Model: predict(image)
        activate Model
        Model -> Orchestrator: prediction, confidence
        deactivate Model

        Orchestrator -> Explainer: explain(image, prediction)
        activate Explainer
        Explainer -> Explainer: compute_attribution()
        Explainer -> Orchestrator: ExplainerResult(attribution)
        deactivate Explainer

        Orchestrator -> Orchestrator: create XAIExplanationResult
    end

    Orchestrator -> ResultManager: add_batch_results(results)
    deactivate Orchestrator
end

== Evaluation ==
Orchestrator -> Evaluator: evaluate_results(all_results)
activate Evaluator

loop for each result with bbox
    Evaluator -> Evaluator: compute_pointing_game()
    Evaluator -> Evaluator: compute_iou()
    Evaluator -> Evaluator: compute_coverage()
end

Evaluator -> Evaluator: aggregate_metrics()
Evaluator -> Orchestrator: EvaluationSummary
deactivate Evaluator

== Speicherung & Visualisierung ==
Orchestrator -> ResultManager: save_results(results, summary)
activate ResultManager
ResultManager -> ResultManager: save_json()
ResultManager -> ResultManager: save_csv()
ResultManager -> Orchestrator: saved_paths
deactivate ResultManager

Orchestrator -> MLflow: log_metrics(summary)
activate MLflow
MLflow -> MLflow: store metrics
deactivate MLflow

Orchestrator -> Visualiser: visualize_results(results, summary)
activate Visualiser
Visualiser -> Visualiser: create_heatmap_overlays()
Visualiser -> Visualiser: create_metric_plots()
Visualiser -> Orchestrator: visualization_paths
deactivate Visualiser

Orchestrator -> MLflow: log_artifacts(paths)
Orchestrator -> MLflow: end_run()

Orchestrator -> Main: final_summary
deactivate Orchestrator

Main -> User: "Pipeline completed successfully"
deactivate Main

@enduml